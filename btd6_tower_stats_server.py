# Auto-generated by btd6_codegen/gen.py.

import asyncio
from typing import Any, Literal, Optional

from pydantic import BaseModel, ConfigDict, Field
from fastmcp import FastMCP
import fastmcp.server.context


# --- Pydantic Response Models ---

class Tower(BaseModel):
    """Pydantic model for tower"""
    model_config = ConfigDict(use_attribute_docstrings=True)

    id: str = Field(..., alias='id')
    """Unique tower identifier"""

    name: str = Field(..., alias='name')
    """Tower display name"""

    category: Literal['Primary', 'Military', 'Magic', 'Support'] = Field(..., alias='category')
    """Tower category"""

    cost_easy: int = Field(..., alias='cost_easy')
    """Base cost on Easy difficulty"""

    cost_medium: int = Field(..., alias='cost_medium')
    """Base cost on Medium difficulty"""

    cost_hard: int = Field(..., alias='cost_hard')
    """Base cost on Hard difficulty"""

    cost_impoppable: int = Field(..., alias='cost_impoppable')
    """Base cost on Impoppable difficulty"""

    description: str = Field(..., alias='description')
    """Tower description"""

    damage: int = Field(..., alias='damage')
    """Base damage per projectile"""

    pierce: int = Field(..., alias='pierce')
    """Number of bloons each projectile can hit"""

    attack_speed: float = Field(..., alias='attack_speed')
    """Attacks per second"""

    range: int = Field(..., alias='range')
    """Attack range"""

    projectile_speed: int | None = Field(..., alias='projectile_speed')
    """Speed of projectiles"""

    camo_detection: bool = Field(..., alias='camo_detection')
    """Can detect camo bloons"""

    lead_popping: bool = Field(..., alias='lead_popping')
    """Can pop lead bloons"""

    frozen_popping: bool = Field(..., alias='frozen_popping')
    """Can pop frozen bloons"""

    hotkey: str | None = Field(..., alias='hotkey')
    """Keyboard shortcut for placing tower"""


class TowerUpgrade(BaseModel):
    """Pydantic model for tower_upgrade"""
    model_config = ConfigDict(use_attribute_docstrings=True)

    name: str = Field(..., alias='name')
    """Name of the upgrade"""

    tier: int = Field(..., alias='tier')
    """Upgrade tier (1-5)"""

    path: Literal['top', 'middle', 'bottom'] = Field(..., alias='path')
    """Upgrade path"""

    cost_easy: int = Field(..., alias='cost_easy')
    """Cost on Easy difficulty"""

    cost_medium: int = Field(..., alias='cost_medium')
    """Cost on Medium difficulty"""

    cost_hard: int = Field(..., alias='cost_hard')
    """Cost on Hard difficulty"""

    cost_impoppable: int = Field(..., alias='cost_impoppable')
    """Cost on Impoppable difficulty"""

    description: str = Field(..., alias='description')
    """Upgrade description"""


class Hero(BaseModel):
    """Pydantic model for hero"""
    model_config = ConfigDict(use_attribute_docstrings=True)

    id: str = Field(..., alias='id')
    """Unique hero identifier"""

    name: str = Field(..., alias='name')
    """Hero display name"""

    description: str = Field(..., alias='description')
    """Hero description"""

    cost: int = Field(..., alias='cost')
    """Cost to place hero"""

    abilities: list[str] = Field(..., alias='abilities')
    """List of hero abilities"""



# --- BTD6 Data Store ---

class BTD6TowerDataStore:
    """Manages BTD6 tower and hero data"""
    
    def __init__(self):
        self.towers = {
            "dart_monkey": Tower(
                id="dart_monkey",
                name="Dart Monkey",
                category="Primary",
                cost_easy=170,
                cost_medium=200,
                cost_hard=215,
                cost_impoppable=240,
                description="Hurls sharp darts that can pop one bloon each.",
                damage=1,
                pierce=1,
                attack_speed=1.0,
                range=32,
                projectile_speed=100,
                camo_detection=false,
                lead_popping=false,
                frozen_popping=true,
                hotkey="Q"
            ),
            "boomerang_monkey": Tower(
                id="boomerang_monkey",
                name="Boomerang Monkey",
                category="Primary",
                cost_easy=270,
                cost_medium=325,
                cost_hard=350,
                cost_impoppable=390,
                description="Throws boomerangs that travel in a wide arc, popping bloons along the way.",
                damage=1,
                pierce=3,
                attack_speed=0.6,
                range=43,
                projectile_speed=80,
                camo_detection=false,
                lead_popping=false,
                frozen_popping=true,
                hotkey="W"
            ),
            "bomb_shooter": Tower(
                id="bomb_shooter",
                name="Bomb Shooter",
                category="Primary",
                cost_easy=475,
                cost_medium=560,
                cost_hard=605,
                cost_impoppable=670,
                description="Hurls explosive bombs that deal area damage.",
                damage=1,
                pierce=40,
                attack_speed=1.4,
                range=45,
                projectile_speed=None,
                camo_detection=false,
                lead_popping=false,
                frozen_popping=true,
                hotkey="E"
            ),
            "sniper_monkey": Tower(
                id="sniper_monkey",
                name="Sniper Monkey",
                category="Military",
                cost_easy=300,
                cost_medium=350,
                cost_hard=380,
                cost_impoppable=420,
                description="Long range sniper that can target any bloon on screen.",
                damage=2,
                pierce=1,
                attack_speed=1.5,
                range=999,
                projectile_speed=999,
                camo_detection=true,
                lead_popping=true,
                frozen_popping=true,
                hotkey="Z"
            ),
            "wizard_monkey": Tower(
                id="wizard_monkey",
                name="Wizard Monkey",
                category="Magic",
                cost_easy=340,
                cost_medium=400,
                cost_hard=430,
                cost_impoppable=480,
                description="Hurls magic energy that can pop lead bloons.",
                damage=1,
                pierce=2,
                attack_speed=1.1,
                range=40,
                projectile_speed=80,
                camo_detection=false,
                lead_popping=true,
                frozen_popping=true,
                hotkey="A"
            ),
            "banana_farm": Tower(
                id="banana_farm",
                name="Banana Farm",
                category="Support",
                cost_easy=850,
                cost_medium=1000,
                cost_hard=1080,
                cost_impoppable=1200,
                description="Generates money each round. Does not attack bloons.",
                damage=0,
                pierce=0,
                attack_speed=0,
                range=0,
                projectile_speed=None,
                camo_detection=false,
                lead_popping=false,
                frozen_popping=false,
                hotkey="F"
            ),
        }
        
        self.heroes = {
            "quincy": Hero(
                id="quincy",
                name="Quincy",
                description="Quincy is a reliable archer hero who starts with a bow.",
                cost=470,
                abilities=["Rapid Shot", "Storm of Arrows"]
            ),
            "gwendolin": Hero(
                id="gwendolin",
                name="Gwendolin",
                description="Gwendolin is a powerful support hero with fire-based attacks.",
                cost=600,
                abilities=["Cocktail of Fire", "Firestorm"]
            ),
        }
        
        self.upgrades = {
            "dart_monkey_top_1": TowerUpgrade(
                name="Sharp Shots",
                tier=1,
                path="top",
                cost_easy=120,
                cost_medium=140,
                cost_hard=150,
                cost_impoppable=170,
                description="+1 pierce. Darts can pop one extra bloon."
            ),
            "dart_monkey_top_2": TowerUpgrade(
                name="Razor Sharp Shots",
                tier=2,
                path="top",
                cost_easy=170,
                cost_medium=200,
                cost_hard=215,
                cost_impoppable=240,
                description="+2 pierce. Darts can now pop 2 extra bloons for a total of 4."
            ),
            "dart_monkey_top_3": TowerUpgrade(
                name="Spike-o-pult",
                tier=3,
                path="top",
                cost_easy=850,
                cost_medium=1000,
                cost_hard=1080,
                cost_impoppable=1200,
                description="Converts the Dart Monkey into a powerful Spike-o-pult."
            ),
            "boomerang_monkey_top_1": TowerUpgrade(
                name="Improved Rangs",
                tier=1,
                path="top",
                cost_easy=130,
                cost_medium=155,
                cost_hard=165,
                cost_impoppable=185,
                description="Boomerangs travel further and faster."
            ),
            "boomerang_monkey_top_2": TowerUpgrade(
                name="Glaives",
                tier=2,
                path="top",
                cost_easy=170,
                cost_medium=200,
                cost_hard=215,
                cost_impoppable=240,
                description="Replaces boomerangs with sharp glaives that can pop Lead Bloons."
            ),
        }
    
    def get_tower(self, tower_id: str) -> Optional[Tower]:
        """Get a tower by ID"""
        return self.towers.get(tower_id)
    
    def get_hero(self, hero_id: str) -> Optional[Hero]:
        """Get a hero by ID"""
        return self.heroes.get(hero_id)
    
    def list_towers(self, category: Optional[str] = None) -> list[Tower]:
        """List all towers, optionally filtered by category"""
        towers = list(self.towers.values())
        if category:
            towers = [t for t in towers if t.category.lower() == category.lower()]
        return towers
    
    def list_heroes(self) -> list[Hero]:
        """List all heroes"""
        return list(self.heroes.values())
    
    def search_towers(self, query: str) -> list[Tower]:
        """Search towers by name or description"""
        query = query.lower()
        results = []
        for tower in self.towers.values():
            if (query in tower.name.lower() or 
                query in tower.description.lower()):
                results.append(tower)
        return results
    
    def get_upgrades_for_tower(self, tower_id: str, path: Optional[str] = None) -> list[TowerUpgrade]:
        """Get upgrades for a tower, optionally filtered by path"""
        upgrades = []
        for upgrade_id, upgrade in self.upgrades.items():
            if upgrade_id.startswith(f"{tower_id}_"):
                if path is None or upgrade.path == path:
                    upgrades.append(upgrade)
        return sorted(upgrades, key=lambda x: x.tier)


# --- FastMCP Server Setup ---

tower_data = BTD6TowerDataStore()

mcp = FastMCP(
    name="btd6-tower-stats",
    instructions="An MCP server providing comprehensive BTD6 tower statistics, upgrade paths, and detailed information scraped from community sources.",
)


# --- Tool Registration ---

@mcp.tool
async def get_tower_info(
    context: fastmcp.server.context.Context,
    tower_id: str
) -> Tower | None:
    """
    Get detailed information about a specific BTD6 tower including stats and upgrades.
    
    Args:
        tower_id: The unique identifier for the tower (e.g., 'dart_monkey', 'sniper_monkey')
    
    Returns:
        Complete tower information with stats, or None if not found
    """
    return tower_data.get_tower(tower_id)


@mcp.tool  
async def get_hero_info(
    context: fastmcp.server.context.Context,
    hero_id: str
) -> Hero | None:
    """
    Get detailed information about a specific BTD6 hero.
    
    Args:
        hero_id: The unique identifier for the hero (e.g., 'quincy', 'gwendolin')
    
    Returns:
        Complete hero information with abilities, or None if not found
    """
    return tower_data.get_hero(hero_id)


@mcp.tool
async def list_all_towers(
    context: fastmcp.server.context.Context,
    category: Optional[str] = None
) -> list[Tower]:
    """
    List all available BTD6 towers, optionally filtered by category.
    
    Args:
        category: Optional filter by tower category ('Primary', 'Military', 'Magic', 'Support')
    
    Returns:
        List of towers matching the criteria
    """
    return tower_data.list_towers(category)


@mcp.tool
async def list_all_heroes(
    context: fastmcp.server.context.Context,
) -> list[Hero]:
    """
    List all available BTD6 heroes.
    
    Returns:
        List of all heroes with their information
    """
    return tower_data.list_heroes()


@mcp.tool
async def search_towers(
    context: fastmcp.server.context.Context,
    query: str
) -> list[Tower]:
    """
    Search for BTD6 towers by name or description.
    
    Args:
        query: Search term to match against tower information
        
    Returns:
        List of towers that match the search criteria
    """
    return tower_data.search_towers(query)


@mcp.tool
async def compare_tower_costs(
    context: fastmcp.server.context.Context,
    tower_ids: list[str],
    difficulty: Literal["easy", "medium", "hard", "impoppable"] = "medium"
) -> dict[str, int]:
    """
    Compare the base costs of multiple BTD6 towers on a specific difficulty.
    
    Args:
        tower_ids: List of tower IDs to compare
        difficulty: Game difficulty level for cost comparison
        
    Returns:
        Dictionary mapping tower IDs to their costs on the specified difficulty
    """
    costs = {}
    for tower_id in tower_ids:
        tower = tower_data.get_tower(tower_id)
        if tower:
            if difficulty == "easy":
                costs[tower_id] = tower.cost_easy
            elif difficulty == "medium":
                costs[tower_id] = tower.cost_medium
            elif difficulty == "hard":
                costs[tower_id] = tower.cost_hard
            elif difficulty == "impoppable":
                costs[tower_id] = tower.cost_impoppable
    return costs


@mcp.tool
async def get_tower_upgrades(
    context: fastmcp.server.context.Context,
    tower_id: str,
    path: Optional[Literal["top", "middle", "bottom"]] = None
) -> list[TowerUpgrade]:
    """
    Get all upgrades for a specific BTD6 tower, optionally filtered by path.
    
    Args:
        tower_id: The unique identifier for the tower
        path: Optional filter for upgrade path ('top', 'middle', or 'bottom')
        
    Returns:
        List of upgrades for the specified tower and path, ordered by tier
    """
    return tower_data.get_upgrades_for_tower(tower_id, path)


@mcp.tool
async def calculate_upgrade_cost(
    context: fastmcp.server.context.Context,
    tower_id: str,
    path: Literal["top", "middle", "bottom"],
    tier: int,
    difficulty: Literal["easy", "medium", "hard", "impoppable"] = "medium"
) -> dict[str, Any]:
    """
    Calculate the total cost to upgrade a BTD6 tower to a specific tier on a specific path.
    
    Args:
        tower_id: The unique identifier for the tower
        path: The upgrade path ('top', 'middle', or 'bottom')
        tier: Target tier (1-5)
        difficulty: Game difficulty level for cost calculation
        
    Returns:
        Dictionary with base cost, upgrade costs, and total cost
    """
    tower = tower_data.get_tower(tower_id)
    if not tower:
        return {"error": "Tower not found"}
    
    # Get base cost
    if difficulty == "easy":
        base_cost = tower.cost_easy
    elif difficulty == "medium":
        base_cost = tower.cost_medium
    elif difficulty == "hard":
        base_cost = tower.cost_hard
    elif difficulty == "impoppable":
        base_cost = tower.cost_impoppable
    
    # Get upgrade costs for the path up to the specified tier
    upgrades = tower_data.get_upgrades_for_tower(tower_id, path)
    upgrades = [u for u in upgrades if u.tier <= tier]
    
    upgrade_costs = []
    total_upgrade_cost = 0
    
    for upgrade in upgrades:
        if difficulty == "easy":
            cost = upgrade.cost_easy
        elif difficulty == "medium":
            cost = upgrade.cost_medium
        elif difficulty == "hard":
            cost = upgrade.cost_hard
        elif difficulty == "impoppable":
            cost = upgrade.cost_impoppable
            
        upgrade_costs.append({"name": upgrade.name, "tier": upgrade.tier, "cost": cost})
        total_upgrade_cost += cost
    
    return {
        "tower_id": tower_id,
        "path": path,
        "target_tier": tier,
        "difficulty": difficulty,
        "base_cost": base_cost,
        "upgrades": upgrade_costs,
        "total_upgrade_cost": total_upgrade_cost,
        "total_cost": base_cost + total_upgrade_cost
    }


if __name__ == "__main__":
    print("Starting BTD6 Tower Stats MCP Server...")
    mcp.run()